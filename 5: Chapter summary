Chapter 5: Loops
Explain the flow of execution in a loop
	• A loop executes instructions repeatedly while a condition is true
	• An off-by-one error is a common error when programming loops. Think through simple test cases to avoid this type of error

Use the technique of hand-tracing to analyze the behavior of a program
	• Hand-tracing is a simulation of code execution in which you step through instructions and track the values of the variables
	• Hand-tracing can help you understand how an unfamiliar algorithm works
	• Hand-tracing can show errors in code or pseudocode

Use for loops for implementing count-controlled loops
	• The for loop is used when a value runs from a starting point to an ending point with a constant increment or decrement

Choose between the while loop and the do loop
	• The do loop is appropriate when the loop body must be executed at least once

Implement loops that read sequences of input data
	• A sentinel value denotes the end of a data set, but it is not part of the data
	• You can use a Boolean variable to control a loop. Set the variable to true before entering the loop, the set it to false to leave the loop.
	• Use input redirection to read input from a file. Use output redirection to capture program output in a file

Use the technique of storyboarding for planning user interactions
	• A storyboard consists of annotated sketches for each step in an action sequence
	• Developing a storyboard helps you understand the inputs and outputs that are required for a program

Know the most common loop algorithms
	• To compute an average, keep a total and a count of all variables
	• To count values that fulfill a condition, check all values and increment a counter for each match
	• If your goal is to find a match, exit the loop when the match is found
	• To find the largest value, update the largest value seen so far whenever you see a larger one
	• To compare adjacent inputs, store the preceding input in a variable
	
Use nested loops to implement multiple levels of iteration
	• When the body of a loop contains another loop, the loops are nested. A typical use of nested loops is printing a table with rows and columns

Apply loops to the implementation of simulations
	• In a simulation, you use the computer to simulate an activity
	• You can introduce randomness by calling the random number generator

Use a debugger to analyze your programs
	• A debugger is a program that you can use to execute another program and analyze its run-time behavior
	• You can make effective use of a debugger by mastering just three concepts: breakpoints, single-stepping, and inspecting variables
	• When a debugger executes a program, the execution is suspended whenever a breakpoint is reached
	• The single-step command executes the program one line at a time
	• Use the divide-and-conquer technique to locate the point of failure of a program
	• During debugging, compare the actual contents of variables against the values you know they should have
